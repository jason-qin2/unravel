{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Desktop/unravel/src/Components/WebScrape.js\";\n\n/*global chrome*/\nimport React, { Component, useState, useEffect } from 'react';\nimport rp from \"request-promise\";\nimport { Button, Card, CardHeader, CardBody, CardFooter } from 'reactstrap';\nimport ErrorPage from './ErrorPage';\nimport MaterialPage from './MaterialPage';\nimport \"./css/popup.css\";\nimport ReactDOM from \"react-dom\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nfunction WebScrape() {\n  const [url, setUrl] = useState(\"\");\n  const [materials, setMaterials] = useState([\"NA\"]);\n  const [numMats, setNumMats] = useState(0);\n  const [toggle, setToggle] = useState(true);\n  const [noMats, setNoMats] = useState(false);\n  useEffect(() => {\n    // use the request-promise library to fetch the HTML from\n    chrome.tabs.query({\n      active: true,\n      lastFocusedWindow: true\n    }, tabs => {\n      if (tabs.length > 0) {\n        console.log(tabs);\n        let _url = tabs[0].url;\n        setUrl(_url);\n        rp(\"http://localhost:8080/\" + _url).then(html => {\n          var m = []; //console.log(html);\n\n          if (html.includes(\"cotton\")) {\n            console.log(\"cotton\");\n            m.push(\"cotton\");\n          }\n\n          if (html.includes(\"polyester\")) {\n            console.log(\"polyester\");\n            m.push(\"polyester\");\n          }\n\n          if (html.includes(\"wool\")) {\n            console.log(\"wool\");\n            m.push(\"wool\");\n          }\n\n          setMaterials(m);\n          setNumMats(m.length);\n\n          if (m.length > 0) {\n            setNoMats(false);\n          } else {\n            setNoMats(true);\n          }\n        }).catch(error => console.log(\"This page has no materials\"));\n      }\n    });\n  });\n\n  if (materials.length == 0) {\n    return /*#__PURE__*/React.createElement(ErrorPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    });\n  } else {\n    return materials.map(m => {\n      return /*#__PURE__*/React.createElement(MaterialPage, {\n        material: m,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 24\n        }\n      });\n    })\n    /*\n    <div>\n    <h3>Details</h3>\n    <h1>See Materials</h1>\n    <h2>OR</h2>\n    <h1>Explore better alternatives</h1>\n    <div></div>\n    <ul>\n        {materials.map(m => {\n            return <li>{m}</li>\n        })}\n    </ul>\n    </div>\n    */\n    ;\n  }\n}\n\nexport default WebScrape;","map":{"version":3,"sources":["/Users/jason/Desktop/unravel/src/Components/WebScrape.js"],"names":["React","Component","useState","useEffect","rp","Button","Card","CardHeader","CardBody","CardFooter","ErrorPage","MaterialPage","ReactDOM","Link","BrowserRouter","Route","Switch","WebScrape","url","setUrl","materials","setMaterials","numMats","setNumMats","toggle","setToggle","noMats","setNoMats","chrome","tabs","query","active","lastFocusedWindow","length","console","log","_url","then","html","m","includes","push","catch","error","map"],"mappings":"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","sourcesContent":["/*global chrome*/\nimport React, {Component, useState, useEffect} from 'react';\nimport rp from \"request-promise\";\nimport { Button, Card, CardHeader, CardBody, CardFooter} from 'reactstrap';\nimport ErrorPage from './ErrorPage';\nimport MaterialPage from './MaterialPage';\nimport \"./css/popup.css\";\nimport ReactDOM from \"react-dom\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nfunction WebScrape() {\n    const [url, setUrl] = useState(\"\");\n    const [materials, setMaterials] = useState([\"NA\"]);\n    const [numMats, setNumMats] = useState(0);\n    const [toggle, setToggle] = useState(true);\n    const [noMats, setNoMats] = useState(false);\n  \n    useEffect (() => {\n      // use the request-promise library to fetch the HTML from\n      chrome.tabs.query({active: true, lastFocusedWindow: true}, tabs => {\n          if (tabs.length > 0) {\n            console.log(tabs);\n            let _url = tabs[0].url;\n            setUrl(_url);\n            rp(\"http://localhost:8080/\" + _url)\n                .then(html => {\n                    var m = [];\n                    //console.log(html);\n                    if (html.includes(\"cotton\")) {\n                        console.log(\"cotton\");\n                        m.push(\"cotton\");\n                    }\n                    if (html.includes(\"polyester\")) {\n                        console.log(\"polyester\");\n                        m.push(\"polyester\");\n                    }\n                    if (html.includes(\"wool\")) {\n                        console.log(\"wool\");\n                        m.push(\"wool\");\n                    }\n                    setMaterials(m);\n                    setNumMats(m.length);\n                    if (m.length > 0) {\n                        setNoMats(false);\n                    } else {\n                        setNoMats(true);\n                    }\n                })\n                .catch(error => console.log(\"This page has no materials\"))\n            }\n      });\n    })\n\n    if (materials.length == 0) {\n        return (\n            <ErrorPage />\n        );\n    }\n    else {\n        return (\n            materials.map(m => {\n                return <MaterialPage material = {m}/>\n            })\n            /*\n        <div>\n            <h3>Details</h3>\n            <h1>See Materials</h1>\n            <h2>OR</h2>\n            <h1>Explore better alternatives</h1>\n            <div></div>\n            <ul>\n                {materials.map(m => {\n                    return <li>{m}</li>\n                })}\n            </ul>\n        </div>\n            */\n        );\n    } \n  }\n  \n  export default WebScrape;"]},"metadata":{},"sourceType":"module"}